import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

/** Autogenerated input type of AddPhase */
export type AddPhaseInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of AddPlayer */
export type AddPlayerInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  phaseId: Scalars['ID'];
  playId: Scalars['ID'];
  position: Scalars['String'];
  side: Side;
};

/** Autogenerated input type of AddPosition */
export type AddPositionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  phaseId: Scalars['ID'];
  playId: Scalars['ID'];
  position: Scalars['String'];
  side: Side;
};

export enum Court {
  Full = 'full',
  Half = 'half'
}

/** Autogenerated input type of CreateDrill */
export type CreateDrillInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  libraryId: Scalars['ID'];
  name: Scalars['String'];
  notes: Scalars['String'];
};

/** Autogenerated input type of CreateLibrary */
export type CreateLibraryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Autogenerated input type of CreatePlay */
export type CreatePlayInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  court: Court;
  libraryId: Scalars['ID'];
  name: Scalars['String'];
};

/** Autogenerated input type of CreatePlayer */
export type CreatePlayerInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  teamId: Scalars['ID'];
};

/** Autogenerated input type of CreateTeam */
export type CreateTeamInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  competition: Scalars['String'];
  name: Scalars['String'];
  season: Scalars['String'];
};

export type Drill = {
  __typename?: 'Drill';
  id: Scalars['ID'];
  library: Library;
  name: Scalars['String'];
};

export type Library = {
  __typename?: 'Library';
  createdAt: Scalars['ISO8601DateTime'];
  drills: Array<Drill>;
  id: Scalars['ID'];
  name: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  plays: Array<Play>;
  team: Team;
  updatedAt: Scalars['ISO8601DateTime'];
  user: User;
};

/** Autogenerated input type of MovePosition */
export type MovePositionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  phaseId: Scalars['ID'];
  playId: Scalars['ID'];
  position: Scalars['String'];
  x: Scalars['Float'];
  y: Scalars['Float'];
};

export type Mutation = {
  __typename?: 'Mutation';
  addPhase?: Maybe<Play>;
  addPlayer?: Maybe<Play>;
  addPosition?: Maybe<Play>;
  createDrill?: Maybe<Drill>;
  createLibrary?: Maybe<Library>;
  createPlay?: Maybe<Play>;
  createPlayer?: Maybe<Player>;
  createTeam?: Maybe<Team>;
  movePosition?: Maybe<Play>;
  setPlayName?: Maybe<Play>;
  setPlayNotes?: Maybe<Play>;
  updateDrillName?: Maybe<UpdateDrillNamePayload>;
  updateLibraryName?: Maybe<Library>;
  updateLibraryNotes?: Maybe<Library>;
  updatePlayerName?: Maybe<UpdatePlayerNamePayload>;
  updateTeamCompetition?: Maybe<UpdateTeamCompetitionPayload>;
  updateTeamName?: Maybe<UpdateTeamNamePayload>;
  updateTeamSeason?: Maybe<UpdateTeamSeasonPayload>;
};


export type MutationAddPhaseArgs = {
  input: AddPhaseInput;
};


export type MutationAddPlayerArgs = {
  input: AddPlayerInput;
};


export type MutationAddPositionArgs = {
  input: AddPositionInput;
};


export type MutationCreateDrillArgs = {
  input: CreateDrillInput;
};


export type MutationCreateLibraryArgs = {
  input: CreateLibraryInput;
};


export type MutationCreatePlayArgs = {
  input: CreatePlayInput;
};


export type MutationCreatePlayerArgs = {
  input: CreatePlayerInput;
};


export type MutationCreateTeamArgs = {
  input: CreateTeamInput;
};


export type MutationMovePositionArgs = {
  input: MovePositionInput;
};


export type MutationSetPlayNameArgs = {
  input: SetPlayNameInput;
};


export type MutationSetPlayNotesArgs = {
  input: SetPlayNotesInput;
};


export type MutationUpdateDrillNameArgs = {
  input: UpdateDrillNameInput;
};


export type MutationUpdateLibraryNameArgs = {
  input: UpdateLibraryNameInput;
};


export type MutationUpdateLibraryNotesArgs = {
  input: UpdateLibraryNotesInput;
};


export type MutationUpdatePlayerNameArgs = {
  input: UpdatePlayerNameInput;
};


export type MutationUpdateTeamCompetitionArgs = {
  input: UpdateTeamCompetitionInput;
};


export type MutationUpdateTeamNameArgs = {
  input: UpdateTeamNameInput;
};


export type MutationUpdateTeamSeasonArgs = {
  input: UpdateTeamSeasonInput;
};

export type Phase = {
  __typename?: 'Phase';
  id: Scalars['ID'];
  index: Scalars['Int'];
  positions?: Maybe<Array<Position>>;
  possession?: Maybe<Scalars['Int']>;
};

export type Play = {
  __typename?: 'Play';
  court: Court;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  library: Library;
  name: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  phases: Array<Phase>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Player = {
  __typename?: 'Player';
  id: Scalars['ID'];
  name: Scalars['String'];
  team: Team;
};

export type Position = {
  __typename?: 'Position';
  id: Scalars['ID'];
  position?: Maybe<Scalars['String']>;
  side?: Maybe<Side>;
  x?: Maybe<Scalars['Float']>;
  y?: Maybe<Scalars['Float']>;
};

export type Query = {
  __typename?: 'Query';
  drill: Drill;
  libraries: Array<Library>;
  library: Library;
  play: Play;
  player: Player;
  team: Team;
  teams: Array<Team>;
};


export type QueryDrillArgs = {
  id: Scalars['ID'];
};


export type QueryLibraryArgs = {
  id: Scalars['ID'];
};


export type QueryPlayArgs = {
  id: Scalars['ID'];
};


export type QueryPlayerArgs = {
  id: Scalars['ID'];
};


export type QueryTeamArgs = {
  id: Scalars['ID'];
};

/** Autogenerated input type of SetPlayName */
export type SetPlayNameInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
};

/** Autogenerated input type of SetPlayNotes */
export type SetPlayNotesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  notes: Scalars['String'];
};

export enum Side {
  Defence = 'defence',
  Offence = 'offence'
}

export type Team = {
  __typename?: 'Team';
  competition?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  libraries?: Maybe<Array<Library>>;
  name: Scalars['String'];
  players?: Maybe<Array<Player>>;
  season?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
  user?: Maybe<User>;
};

/** Autogenerated input type of UpdateDrillName */
export type UpdateDrillNameInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateDrillName */
export type UpdateDrillNamePayload = {
  __typename?: 'UpdateDrillNamePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateLibraryName */
export type UpdateLibraryNameInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of UpdateLibraryNotes */
export type UpdateLibraryNotesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of UpdatePlayerName */
export type UpdatePlayerNameInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdatePlayerName */
export type UpdatePlayerNamePayload = {
  __typename?: 'UpdatePlayerNamePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateTeamCompetition */
export type UpdateTeamCompetitionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTeamCompetition */
export type UpdateTeamCompetitionPayload = {
  __typename?: 'UpdateTeamCompetitionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateTeamName */
export type UpdateTeamNameInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTeamName */
export type UpdateTeamNamePayload = {
  __typename?: 'UpdateTeamNamePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateTeamSeason */
export type UpdateTeamSeasonInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTeamSeason */
export type UpdateTeamSeasonPayload = {
  __typename?: 'UpdateTeamSeasonPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  emailAddress: Scalars['String'];
  id: Scalars['ID'];
  libraries?: Maybe<Array<Library>>;
  teams?: Maybe<Array<Team>>;
};

export type GetTeamsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetTeamsQuery = { __typename?: 'Query', teams: Array<{ __typename?: 'Team', name: string, id: string }> };


export const GetTeamsDocument = gql`
    query GetTeams {
  teams {
    name
    id
  }
}
    `;

/**
 * __useGetTeamsQuery__
 *
 * To run a query within a React component, call `useGetTeamsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTeamsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTeamsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetTeamsQuery(baseOptions?: Apollo.QueryHookOptions<GetTeamsQuery, GetTeamsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetTeamsQuery, GetTeamsQueryVariables>(GetTeamsDocument, options);
      }
export function useGetTeamsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTeamsQuery, GetTeamsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetTeamsQuery, GetTeamsQueryVariables>(GetTeamsDocument, options);
        }
export type GetTeamsQueryHookResult = ReturnType<typeof useGetTeamsQuery>;
export type GetTeamsLazyQueryHookResult = ReturnType<typeof useGetTeamsLazyQuery>;
export type GetTeamsQueryResult = Apollo.QueryResult<GetTeamsQuery, GetTeamsQueryVariables>;

      export interface PossibleTypesResultData {
        possibleTypes: {
          [key: string]: string[]
        }
      }
      const result: PossibleTypesResultData = {
  "possibleTypes": {}
};
      export default result;
    